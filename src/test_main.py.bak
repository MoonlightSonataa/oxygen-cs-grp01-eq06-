import os
import sys
import unittest
import yaml
from unittest.mock import patch, Mock
from unittest.mock import call


sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))

from main import Main


class MainTest(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        config_file = os.path.join(
            os.path.dirname(os.path.abspath(__file__)), "config_test.yml"
        )
        with open(config_file, "r", encoding="utf-8") as config_file:
            config = yaml.safe_load(config_file)
        os.environ.update(config.get("variables", {}))

    def test_default_values(self):
        with patch.dict("os.environ", {}):
            main = Main()
            self.assertEqual(main.host, "http://34.95.34.5")
            self.assertEqual(main.tickets, "5")
            self.assertEqual(main.t_max, "600")
            self.assertEqual(main.t_min, "2")
            self.assertEqual(main.database, "oxygenDB")

    def test_env_values(self):
        with patch.dict(
            "os.environ",
            {
                "HOST": "http://34.95.34.5",
                "TOKEN": "69aWxpk655",
                "TICKETS": "5",
                "T_MAX": "600",
                "T_MIN": "2",
                "DATABASE": "oxygenDB",
            },
        ):
            main = Main()
            self.assertEqual(main.host, "http://34.95.34.5")
            self.assertEqual(main.token, "69aWxpk655")
            self.assertEqual(main.tickets, "5")
            self.assertEqual(main.t_max, "600")
            self.assertEqual(main.t_min, "2")
            self.assertEqual(main.database, "oxygenDB")

    def test_missing_token(self):
        with patch.dict(
            "os.environ",
            {
                "HOST": "http://34.95.34.5",
                "TOKEN": "",
                "TICKETS": "5",
                "T_MAX": "600",
                "T_MIN": "2",
                "DATABASE": "oxygenDB",
            },
        ):
            with self.assertRaises(ValueError):
                Main()

    @patch("requests.get")
    def test_analyze_datapoint_above_max(self, mock_get):
        main = Main()
        mock_get.return_value = Mock(text='{"result": "success"}')
        main.t_max = "30"
        main.analyze_datapoint("2023-07-02T12:00:00Z", "35")
        mock_get.assert_called_once_with(
            f"{main.host}/api/hvac/{main.token}/TurnOnAc/{main.tickets}",
            timeout=5,
        )

    @patch("requests.get")
    def test_analyze_datapoint_below_min(self, mock_get):
        main = Main()
        mock_get.return_value = Mock(text='{"result": "success"}')
        main.t_min = "20"
        main.analyze_datapoint("2023-07-02T12:00:00Z", "15")
        mock_get.assert_called_once_with(
            f"{main.host}/api/hvac/{main.token}/TurnOnHeater/{main.tickets}",
            timeout=5,
        )

    @patch("requests.get")
    def test_analyze_datapoint_in_range(self, mock_get):
        main = Main()
        mock_get.return_value = Mock(text='{"result": "success"}')
        main.t_min = "20"
        main.t_max = "30"
        main.analyze_datapoint("2023-07-02T12:00:00Z", "25")
        mock_get.assert_not_called()

    def test_set_sensor_hub(self):
        main = Main()
        main.set_sensor_hub()
        self.assertIsNotNone(main._hub_connection)
        self.assertEqual(
            main._hub_connection.url,
            f"{main.host}/SensorHub?token={main.token}"
        )

    def test_on_sensor_data_received_single_data_point(self):
        main = Main()
        main.send_action_to_hvac = Mock()
        main.analyze_datapoint = Mock()
        data = [{"date": "2023-07-02T12:00:00Z", "data": "25"}]
        main.on_sensor_data_received(data)
        main.send_action_to_hvac.assert_called_once_with(
            "2023-07-02T12:00:00Z", "25"
        )
        main.analyze_datapoint.assert_called_once_with(
            "2023-07-02T12:00:00Z", "25"
        )
    def test_on_sensor_data_received_multiple_data_points(self):
            main = Main()
            main.send_action_to_hvac = Mock()
            main.analyze_datapoint = Mock()
            data = [
                {"date": "2023-07-02T12:00:00Z", "data": "25"},
                {"date": "2023-07-02T12:01:00Z", "data": "30"},
                {"date": "2023-07-02T12:02:00Z", "data": "15"},
            ]
            main.on_sensor_data_received(data)
            main.send_action_to_hvac.assert_has_calls([
                call("2023-07-02T12:00:00Z", "25"),
                call("2023-07-02T12:01:00Z", "30"),
                call("2023-07-02T12:02:00Z", "15")
            ])
            self.assertEqual(main.send_action_to_hvac.call_count, 3)
            
if __name__ == "__main__":
    unittest.main()